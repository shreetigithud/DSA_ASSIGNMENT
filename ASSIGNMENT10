 **Question 1**

Given an integer `n`, return *`true` if it is a power of three. Otherwise, return `false`*.

An integer `n` is a power of three, if there exists an integer `x` such that `n == 3x`.

**Example 1:**
Input: n = 27
Output: true
Explanation: 27 = 33
Example 2
Input: n = 0
Output: false
Explanation: There is no x where 3x = 0.
Example 3
Input: n = -1
Output: false
Explanation: There is no x where 3x = (-1).
ANS:-function PowerOfTwo(n) { 
     if (n <= 0) { 
         return false; // Negative numbers and zero are not powers of two 
     } 
  
     while (n > 1) { 
         if (n % 2 !== 0) { 
             return false; // If n is not divisible by 2, it's not a power of two 
         } 
         n /= 2; // Divide n by 2 until it becomes 1 (if it's a power of two) 
     } 
  
     return true; 
 } 
  
 // Testing the function 
 console.log(PowerOfTwo(1));  // true 
 console.log(PowerOfTwo(16)); // true 
 console.log(PowerOfTwo(3));  // false 
  ///Output: true,true,false 
  
  
============================================================================================================================
 **Question 2**

You have a list `arr` of all integers in the range `[1, n]` sorted in a strictly increasing order. Apply the following algorithm on `arr`:

- Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.
- Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.
- Keep repeating the steps again, alternating left to right and right to left, until a single number remains.

Given the integer `n`, return *the last number that remains in* `arr`.

**Example 1:**
Input: n = 9
Output: 6
Explanation:
arr = [1, 2,3, 4,5, 6,7, 8,9]
arr = [2,4, 6,8]
arr = [2, 6]
arr = [6]
Example 2
Input: n = 1
Output: 1
ANS:- function sumOfFirstNNumbers(n) { 
     return (n * (n + 1)) / 2; 
 } 
  
 // Testing the function 
 console.log(sumOfFirstNNumbers(3)); // 6 
 console.log(sumOfFirstNNumbers(5)); // 15 
   ///Output:6 ; 15 
====================================================================================================================================
**Question 3**

****Given a set represented as a string, write a recursive code to print all subsets of it. The subsets can be printed in any order.

**Example 1:**

Input :  set = “abc”

Output : { “”, “a”, “b”, “c”, “ab”, “ac”, “bc”, “abc”}

**Example 2:**

Input : set = “abcd”

Output : { “”, “a” ,”ab” ,”abc” ,”abcd”, “abd” ,”ac” ,”acd”, “ad” ,”b”, “bc” ,”bcd” ,”bd” ,”c” ,”cd” ,”d” }
ANS:- function factorial(N) { 
     if (N === 0 || N === 1) { 
         return 1; // Factorial of 0 and 1 is 1 
     } 
  
     let result = 1; 
     for (let i = 2; i <= N; i++) { 
         result *= i; 
     } 
  
     return result; 
 } 
  
 // Testing the function 
 console.log(factorial(5)); // 120 
 console.log(factorial(4)); // 24 
  
  
=======================================================================================================================================
 **Question 4**

Given a string calculate length of the string using recursion.

**Examples:**
Input : str = "abcd"
Output :4

Input : str = "GEEKSFORGEEKS"
Output :13
Example 2
Input : str = "abcd"
Output :4

Input : str = "GEEKSFORGEEKS"
Output :13
ANS:-function computeExponentiation(N, P) { 
     return Math.pow(N, P); 
 } 
  
 // Testing the function 
 console.log(computeExponentiation(5, 2)); // 25 
 console.log(computeExponentiation(2, 5)); // 32 
   function findMax(arr, index) { 
     // Base case: When index reaches the end of the array 
     if (index === arr.length - 1) { 
         return arr[index]; 
     } 
  
     // Recursive case: Compare the current element with the maximum of the remaining elements 
     const current = arr[index]; 
     const maxOfRemaining = findMax(arr, index + 1); 
  
     return Math.max(current, maxOfRemaining); 
 } 
  
 // Testing the function 
 console.log(findMax([1, 4, 3, -5, -4, 8, 6], 0)); // 8 
 console.log(findMax([1, 4, 45, 6, 10, -8], 0));  // 45 
  
==========================================================================================================================================
 **Question 5**

We are given a string S, we need to find count of all contiguous substrings starting and ending with same character.

**Examples :**
Input  : S = "abcab"
Output : 7
There are 15 substrings of "abcab"
a, ab, abc, abca, abcab, b, bc, bca
bcab, c, ca, cab, a, ab, b
Out of the above substrings, there
are 7 substrings : a, abca, b, bcab,
c, a and b.

Input  : S = "aba"
Output : 4
The substrings are a, b, a and aba
ANS:-function findNthTerm(a, d, N) { 
     return a + (N - 1) * d; 
 } 
  
 // Testing the function 
 console.log(findNthTerm(2, 1, 5));  // 6 
 console.log(findNthTerm(5, 2, 10)); // 23 
  
===================================================================================================================================================
**Question 6**

The [tower of Hanoi](https://en.wikipedia.org/wiki/Tower_of_Hanoi) is a famous puzzle where we have three rods and **N** disks. The objective of the puzzle is to move the entire stack to another rod. You are given the number of discs **N**. Initially, these discs are in the rod 1. You need to print all the steps of discs movement so that all the discs reach the 3rd rod. Also, you need to find the total moves.**Note:** The discs are arranged such that the **top disc is numbered 1** and the **bottom-most disc is numbered N**. Also, all the discs have **different sizes** and a bigger disc **cannot** be put on the top of a smaller disc. Refer the provided link to get a better clarity about the puzzle.

**Example 1:**
Input:
N = 2
Output:
move disk 1 from rod 1 to rod 2
move disk 2 from rod 1 to rod 3
move disk 1 from rod 2 to rod 3
3
Explanation:For N=2 , steps will be
as follows in the example and total
3 steps will be taken.
Example 2
Input:
N = 3
Output:
move disk 1 from rod 1 to rod 3
move disk 2 from rod 1 to rod 2
move disk 1 from rod 3 to rod 2
move disk 3 from rod 1 to rod 3
move disk 1 from rod 2 to rod 1
move disk 2 from rod 2 to rod 3
move disk 1 from rod 1 to rod 3
7
Explanation:For N=3 , steps will be
as follows in the example and total
7 steps will be taken.
ANS:-  
 function findNthTerm(a, d, N) { 
     return a + (N - 1) * d; 
 } 
  
 // Testing the function 
 console.log(findNthTerm(2, 1, 5));  // 6 
 console.log(findNthTerm(5, 2, 10)); // 23 
  
===========================================================================================================================================================
**Question 7**

Given a string **str**, the task is to print all the permutations of **str**. A **permutation** is an arrangement of all or part of a set of objects, with regard to the order of the arrangement. For instance, the words ‘bat’ and ‘tab’ represents two distinct permutation (or arrangements) of a similar three letter word.

**Examples:**

> Input: str = “cd”
> 
> 
> **Output:** cd dc
> 
> **Input:** str = “abb”
> 
> **Output:** abb abb bab bba bab bba
> 
ANS:- function generatePermutations(S) { 
     const result = []; 
     permute(S, 0, S.length - 1, result); 
     return result; 
 } 
  
 function permute(S, left, right, result) { 
     if (left === right) { 
         result.push(S); // Found a permutation 
     } else { 
         for (let i = left; i <= right; i++) { 
             S = swapCharacters(S, left, i); // Swap characters 
             permute(S, left + 1, right, result); // Recurse for remaining characters 
             S = swapCharacters(S, left, i); // Backtrack (undo the swap) 
         } 
     } 
 } 
  
 function swapCharacters(S, i, j) { 
     const charArray = S.split(''); 
     const temp = charArray[i]; 
     charArray[i] = charArray[j]; 
     charArray[j] = temp; 
     return charArray.join(''); 
 } 
  
 // Testing the function 
 console.log(generatePermutations('ABC')); // ["ABC", "ACB", "BAC", "BCA", "CBA", "CAB"] 
 console.log(generatePermutations('XY'));  // ["XY", "YX"] 
  
  
============================================================================================================================================================
 **Question 8**

Given a string, count total number of consonants in it. A consonant is an English alphabet character that is not vowel (a, e, i, o and u). Examples of constants are b, c, d, f, and g.

**Examples :**
Input : abc de
Output : 3
There are three consonants b, c and d.

Input : geeksforgeeks portal
Output : 12
ANS:-function productOfArrayElements(arr) { 
     let product = 1; 
  
     for (let i = 0; i < arr.length; i++) { 
         product *= arr[i]; 
     } 
  
     return product; 
 } 
  
 // Testing the function 
 console.log(productOfArrayElements([1, 2, 3, 4, 5])); // 120 
 console.log(productOfArrayElements([1, 6, 3]));       // 18
