<aside>
ğŸ’¡ 1. **Roman to Integer**

Roman numerals are represented by seven different symbols:Â `I`,Â `V`,Â `X`,Â `L`,Â `C`,Â `D`Â andÂ `M`.

```
SymbolValue
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
```

For example,Â `2`Â is written asÂ `II`Â in Roman numeral, just two ones added together.Â `12`Â is written asÂ `XII`, which is simplyÂ `X + II`. The numberÂ `27`Â is written asÂ `XXVII`, which isÂ `XX + V + II`.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is notÂ `IIII`. Instead, the number four is written asÂ `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written asÂ `IX`. There are six instances where subtraction is used:

- `I`Â can be placed beforeÂ `V`Â (5) andÂ `X`Â (10) to make 4 and 9.
- `X`Â can be placed beforeÂ `L`Â (50) andÂ `C`Â (100) to make 40 and 90.
- `C`Â can be placed beforeÂ `D`Â (500) andÂ `M`Â (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer.

**Example 1:**

```
Input: s = "III"
Output: 3
Explanation: III = 3.
```

**Example 2:**

```
Input: s = "LVIII"
Output: 58
Explanation: L = 50, V= 5, III = 3.
```

**Constraints:**

- `1 <= s.length <= 15`
- `s`Â contains onlyÂ the charactersÂ `('I', 'V', 'X', 'L', 'C', 'D', 'M')`.
- It isÂ **guaranteed**Â thatÂ `s`Â is a valid roman numeral in the rangeÂ `[1, 3999]`.
ANS:-def romanToInt(s):
    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    total = 0
    n = len(s)

    for i in range(n):
        if i < n - 1 and roman_values[s[i]] < roman_values[s[i+1]]:
            total -= roman_values[s[i]]
        else:
            total += roman_values[s[i]]

    return total
print(romanToInt("III"))
print(romanToInt("LVIII"))

ğŸ’¡ 2. **Longest Substring Without Repeating Characters**

Given a stringÂ `s`, find the length of theÂ **longest substring** without repeating characters.

**Example 1:**

```
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
```

**Example 2:**

```
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
```

**Example 3:**

```
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
```

**Constraints:**

- `0 <= s.length <= 50000`
- `s`Â consists of English letters, digits, symbols and spaces.

ANS:-def lengthOfLongestSubstring(s):
    n = len(s)
    seen = set()
    left = right = max_length = 0

    while right < n:
        if s[right] in seen:
            seen.remove(s[left])
            left += 1
        else:
            seen.add(s[right])
            max_length = max(max_length, right - left + 1)
            right += 1

    return max_length
print(lengthOfLongestSubstring("abcabcbb"))  
print(lengthOfLongestSubstring("bbbbb"))     
print(lengthOfLongestSubstring("pwwkew"))    

ğŸ’¡ 3. **Majority Element**

Given an arrayÂ `nums`Â of sizeÂ `n`, returnÂ *the majority element*.

The majority element is the element that appears more thanÂ `âŒŠn / 2âŒ‹`Â times. You may assume that the majority element always exists in the array.

**Example 1:**

```
Input: nums = [3,2,3]
Output: 3
```

**Example 2:**

```
Input: nums = [2,2,1,1,1,2,2]
Output: 2
```

**Constraints:**

- `n == nums.length`
- `1 <= n <= 5 * 10^4`
- `-10^9 <= nums[i] <= 10^9`
ANS:-def majorityElement(nums):
    candidate = None
    count = 0

    for num in nums:
        if count == 0:
            candidate = num
            count = 1
        elif num == candidate:
            count += 1
        else:
            count -= 1
        count = 0
        for num in nums:
        if num == candidate:
            count += 1
        if count > len(nums) // 2:
        return candidate
        return None 
print(majorityElement([3, 2, 3]))                      
print(majorityElement([2, 2, 1, 1, 1, 2, 2]))          


ğŸ’¡ 4. **Group Anagram**

Given an array of stringsÂ `strs`, groupÂ **the anagrams**Â together. You can return the answer inÂ **any order**.

AnÂ **Anagram**Â is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

**Example 1:**

```
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
```

**Example 2:**

```
Input: strs = [""]
Output: [[""]]
```

**Example 3:**

```
Input: strs = ["a"]
Output: [["a"]]
```

**Constraints:**

- `1 <= strs.length <= 10000`
- `0 <= strs[i].length <= 100`
- `strs[i]`Â consists of lowercase English letters.
ANS:-def groupAnagrams(strs):
    anagrams = {}

    for s in strs:
        sorted_s = ''.join(sorted(s))
        if sorted_s not in anagrams:
            anagrams[sorted_s] = []
        anagrams[sorted_s].append(s)

    return list(anagrams.values())
print(groupAnagrams(["eat","tea","tan","ate","nat","bat"]))

ğŸ’¡ 5. **Ugly Numbers**

AnÂ **ugly number**Â is a positive integer whose prime factors are limited toÂ `2`,Â `3`, andÂ `5`.

Given an integerÂ `n`, returnÂ *the*Â `nth`Â ***ugly number***.

**Example 1:**

```
Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.
```

**Example 2:**

```
Input: n = 1
Output: 1
Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.
```

**Constraints:**

- `1 <= n <= 1690`
ANS:-def nthUglyNumber(n):
    ugly = [0] * n
    ugly[0] = 1
    p2 = p3 = p5 = 0

    for i in range(1, n):
        next_ugly = min(ugly[p2] * 2, ugly[p3] * 3, ugly[p5] * 5)
        if next_ugly == ugly[p2] * 2:
            p2 += 1
        if next_ugly == ugly[p3] * 3:
            p3 += 1
        if next_ugly == ugly[p5] * 5:
            p5 += 1
        ugly[i] = next_ugly

    return ugly[-1]
print(nthUglyNumber(10)) 
print(nthUglyNumber(1))  

ğŸ’¡ 6. **Top K Frequent Words**

Given an array of stringsÂ `words`Â and an integerÂ `k`, returnÂ *the*Â `k`Â *most frequent strings*.

Return the answerÂ **sorted**Â byÂ **the frequency**Â from highest to lowest. Sort the words with the same frequency by theirÂ **lexicographical order**.

**Example 1:**

```
Input: words = ["i","love","leetcode","i","love","coding"], k = 2
Output: ["i","love"]
Explanation: "i" and "love" are the two most frequent words.
Note that "i" comes before "love" due to a lower alphabetical order.
```

**Example 2:**

```
Input: words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4
Output: ["the","is","sunny","day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.
```

**Constraints:**

- `1 <= words.length <= 500`
- `1 <= words[i].length <= 10`
- `words[i]`Â consists of lowercase English letters.
- `k`Â is in the rangeÂ `[1, The number of **unique** words[i]]`

ANS:-def topKFrequent(words, k):
    word_counts = {}
    for word in words:
        word_counts[word] = word_counts.get(word, 0) + 1

    unique_words = sorted(set(words))
    unique_words.sort(key=lambda x: (-word_counts[x], x))

    return unique_words[:k]
print(topKFrequent(["i", "love", "leetcode", "i", "love", "coding"], 2))
print(topKFrequent(["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], 4))

ğŸ’¡ 7. **Sliding Window Maximum**

You are given an array of integersÂ `nums`, there is a sliding window of sizeÂ `k`Â which is moving from the very left of the array to the very right. You can only see theÂ `k`Â numbers in the window. Each time the sliding window moves right by one position.

ReturnÂ *the max sliding window*.

**Example 1:**

```
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation:
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6 7         3
 1 [3  -1  -3] 5  3  6 7         3
 1  3 [-1  -3  5] 3  6 7         5
 1  3  -1 [-3  5  3] 6 7         5
 1  3  -1  -3 [5  3  6]7         6
 1  3  -1  -3  5 [3  6  7]       7
```

**Example 2:**

```
Input: nums = [1], k = 1
Output: [1]
```

**Constraints:**

- `1 <= nums.length <= 100000`
- -`10000 <= nums[i] <= 10000`
- `1 <= k <= nums.length`
ANS:-from collections import deque

def maxSlidingWindow(nums, k):
    window = deque()
    result = []

    for i in range(len(nums)):
        if window and window[0] <= i - k:
            window.popleft()

        while window and nums[window[-1]] <= nums[i]:
            window.pop()

        window.append(i)

        if i >= k - 1:
            result.append(nums[window[0]])

    return result
print(maxSlidingWindow([1, 3, -1, -3, 5, 3, 6, 7], 3))

ğŸ’¡ 8. **Find K Closest Elements**

Given aÂ **sorted**Â integer arrayÂ `arr`, two integersÂ `k`Â andÂ `x`, return theÂ `k`Â closest integers toÂ `x`Â in the array. The result should also be sorted in ascending order.

An integerÂ `a`Â is closer toÂ `x`Â than an integerÂ `b`Â if:

- `|a - x| < |b - x|`, or
- `|a - x| == |b - x|`Â andÂ `a < b`

**Example 1:**

```
Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]
```

**Example 2:**

```
Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]
```

**Constraints:**

- `1 <= k <= arr.length`
- `1 <= arr.length <= 10000`
- `arr`Â is sorted inÂ **ascending**Â order.
- -`10000 <= arr[i], x <= 10000`
ANS:-def findClosestElements(arr, k, x):
    left = 0
    right = len(arr) - 1

    while right - left + 1 > k:
        if abs(arr[left] - x) >= abs(arr[right] - x):
            left += 1
        else:
            right -= 1

    return arr[left:right+1]
print(findClosestElements([1, 2, 3, 4, 5], 4, 3))
print(findClosestElements([1, 2, 3, 4, 5], 4, -1))

